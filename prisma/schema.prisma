// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tag {
  id   String @id @default(cuid())
  name String @db.VarChar(100)
  Post Post[]
}

enum PostType {
  DRAFT
  PUBLISHED
}

model Post {
  id              String            @id @default(cuid())
  title           String            @db.VarChar(100)
  content         String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  banner_url      String
  author_id       String
  author          User              @relation(fields: [author_id], references: [id])
  post_type       PostType
  tags            Tag[]
  blog_likes      Blog_likes[]
  comments        Comment[]
  bookmarked_blog Bookmarked_Blog[]
}

model User {
  id               String            @id @default(cuid())
  first_name       String
  last_name        String
  email            String
  profile_image    String?
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  posts            Post[]
  blog_likes       Blog_likes[]
  bookmarked_blogs Bookmarked_Blog[]
  comments         Comment[]
}

model Blog_likes {
  like_id  String   @id @unique @default(cuid())
  post_id  String
  user_id  String
  liked_at DateTime @default(now())
  blog     Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Bookmarked_Blog {
  bookmard_id   String   @id @unique @default(cuid())
  bookmarked_at DateTime @default(now())
  post_id       String
  post          Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user_id       String
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Comment {
  comment_id      String   @id @unique @default(cuid())
  comment_content String
  commented_at    DateTime @default(now())
  post_id         String
  post            Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user_id         String
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
